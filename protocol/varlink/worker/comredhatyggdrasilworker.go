// Code generated by github.com/varlink/go/cmd/varlink-go-interface-generator, DO NOT EDIT.

// Interface to interact with yggdrasil workers.
package comredhatyggdrasilworker

import (
	"context"
	"encoding/json"
	"fmt"
	"github.com/varlink/go/varlink"
)

// Generated type declarations

// The dispatched data was rejected by the worker.
type DispatchRejected struct {
	Reason string `json:"reason"`
}

func (e DispatchRejected) Error() string {
	s := "com.redhat.yggdrasil.worker.DispatchRejected"
	s += fmt.Sprintf("(Reason: %v)", e.Reason)
	return s
}

func Dispatch_Error(err error) error {
	if e, ok := err.(*varlink.Error); ok {
		switch e.Name {
		case "com.redhat.yggdrasil.worker.DispatchRejected":
			errorRawParameters := e.Parameters.(*json.RawMessage)
			if errorRawParameters == nil {
				return e
			}
			var param DispatchRejected
			err := json.Unmarshal(*errorRawParameters, &param)
			if err != nil {
				return e
			}
			return &param
		}
	}
	return err
}

// Generated client method calls

// Dispatch sends data to the worker along with the provided metadata.
type Dispatch_methods struct{}

func Dispatch() Dispatch_methods { return Dispatch_methods{} }

func (m Dispatch_methods) Call(ctx context.Context, c *varlink.Connection, id_in_ string, metadata_in_ map[string]string, data_in_ json.RawMessage) (accepted_out_ bool, err_ error) {
	receive, err_ := m.Send(ctx, c, 0, id_in_, metadata_in_, data_in_)
	if err_ != nil {
		return
	}
	accepted_out_, _, err_ = receive(ctx)
	return
}

func (m Dispatch_methods) Send(ctx context.Context, c *varlink.Connection, flags uint64, id_in_ string, metadata_in_ map[string]string, data_in_ json.RawMessage) (func(ctx context.Context) (bool, uint64, error), error) {
	var in struct {
		Id       string            `json:"id"`
		Metadata map[string]string `json:"metadata"`
		Data     json.RawMessage   `json:"data"`
	}
	in.Id = id_in_
	in.Metadata = map[string]string(metadata_in_)
	in.Data = data_in_
	receive, err := c.Send(ctx, "com.redhat.yggdrasil.worker.Dispatch", in, flags)
	if err != nil {
		return nil, err
	}
	return func(context.Context) (accepted_out_ bool, flags uint64, err error) {
		var out struct {
			Accepted bool `json:"accepted"`
		}
		flags, err = receive(ctx, &out)
		if err != nil {
			err = Dispatch_Error(err)
			return
		}
		accepted_out_ = out.Accepted
		return
	}, nil
}

func (m Dispatch_methods) Upgrade(ctx context.Context, c *varlink.Connection, id_in_ string, metadata_in_ map[string]string, data_in_ json.RawMessage) (func(ctx context.Context) (accepted_out_ bool, flags uint64, conn varlink.ReadWriterContext, err_ error), error) {
	var in struct {
		Id       string            `json:"id"`
		Metadata map[string]string `json:"metadata"`
		Data     json.RawMessage   `json:"data"`
	}
	in.Id = id_in_
	in.Metadata = map[string]string(metadata_in_)
	in.Data = data_in_
	receive, err := c.Upgrade(ctx, "com.redhat.yggdrasil.worker.Dispatch", in)
	if err != nil {
		return nil, err
	}
	return func(context.Context) (accepted_out_ bool, flags uint64, conn varlink.ReadWriterContext, err error) {
		var out struct {
			Accepted bool `json:"accepted"`
		}
		flags, conn, err = receive(ctx, &out)
		if err != nil {
			err = Dispatch_Error(err)
			return
		}
		accepted_out_ = out.Accepted
		return
	}, nil
}

// Generated service interface with all methods

type comredhatyggdrasilworkerInterface interface {
	Dispatch(ctx context.Context, c VarlinkCall, id_ string, metadata_ map[string]string, data_ json.RawMessage) error
}

// Generated service object with all methods

type VarlinkCall struct{ varlink.Call }

// Generated reply methods for all varlink errors

// The dispatched data was rejected by the worker.
func (c *VarlinkCall) ReplyDispatchRejected(ctx context.Context, reason_ string) error {
	var out DispatchRejected
	out.Reason = reason_
	return c.ReplyError(ctx, "com.redhat.yggdrasil.worker.DispatchRejected", &out)
}

// Generated reply methods for all varlink methods

func (c *VarlinkCall) ReplyDispatch(ctx context.Context, accepted_ bool) error {
	var out struct {
		Accepted bool `json:"accepted"`
	}
	out.Accepted = accepted_
	return c.Reply(ctx, &out)
}

// Generated dummy implementations for all varlink methods

// Dispatch sends data to the worker along with the provided metadata.
func (s *VarlinkInterface) Dispatch(ctx context.Context, c VarlinkCall, id_ string, metadata_ map[string]string, data_ json.RawMessage) error {
	return c.ReplyMethodNotImplemented(ctx, "com.redhat.yggdrasil.worker.Dispatch")
}

// Generated method call dispatcher

func (s *VarlinkInterface) VarlinkDispatch(ctx context.Context, call varlink.Call, methodname string) error {
	switch methodname {
	case "Dispatch":
		var in struct {
			Id       string            `json:"id"`
			Metadata map[string]string `json:"metadata"`
			Data     json.RawMessage   `json:"data"`
		}
		err := call.GetParameters(&in)
		if err != nil {
			return call.ReplyInvalidParameter(ctx, "parameters")
		}
		return s.comredhatyggdrasilworkerInterface.Dispatch(ctx, VarlinkCall{call}, in.Id, map[string]string(in.Metadata), in.Data)

	default:
		return call.ReplyMethodNotFound(ctx, methodname)
	}
}

// Generated varlink interface name

func (s *VarlinkInterface) VarlinkGetName() string {
	return `com.redhat.yggdrasil.worker`
}

// Generated varlink interface description

func (s *VarlinkInterface) VarlinkGetDescription() string {
	return `# Interface to interact with yggdrasil workers.
interface com.redhat.yggdrasil.worker

# Dispatch sends data to the worker along with the provided metadata.
method Dispatch(id: string, metadata: [string]string, data: object) -> (accepted: bool)

# The dispatched data was rejected by the worker.
error DispatchRejected (reason: string)
`
}

// Generated service interface

type VarlinkInterface struct {
	comredhatyggdrasilworkerInterface
}

func VarlinkNew(m comredhatyggdrasilworkerInterface) *VarlinkInterface {
	return &VarlinkInterface{m}
}
